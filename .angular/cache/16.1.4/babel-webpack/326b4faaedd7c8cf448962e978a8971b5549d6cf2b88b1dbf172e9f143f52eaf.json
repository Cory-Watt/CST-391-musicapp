{"ast":null,"code":"// Importing custom classes for Album and Track.\nimport { Album } from '../models/Album';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/music-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CreateAlbumComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function CreateAlbumComponent_div_0_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onSubmit());\n    });\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"label\", 6);\n    i0.ɵɵtext(5, \"Artist\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.album.Artist = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 8);\n    i0.ɵɵtext(9, \"Album\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.album.Title = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 10);\n    i0.ɵɵtext(13, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"textarea\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_textarea_ngModelChange_14_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.album.Description = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 12);\n    i0.ɵɵtext(17, \"Year\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_18_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.album.Year = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 5)(20, \"label\", 14);\n    i0.ɵɵtext(21, \"Image Filename\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.album.Image = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 5)(24, \"label\", 16);\n    i0.ɵɵtext(25, \"Tracks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"textarea\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_textarea_ngModelChange_26_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.tracksRaw = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"button\", 18);\n    i0.ɵɵtext(28, \"Submit\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Artist);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Description);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Year);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Image);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.tracksRaw);\n  }\n}\nfunction CreateAlbumComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Album was added successfully.\");\n    i0.ɵɵelementEnd();\n  }\n}\n// Decorator that marks a class as an Angular component and provides configuration metadata.\nexport class CreateAlbumComponent {\n  // Injecting the music service into the component.\n  constructor(service) {\n    this.service = service;\n    this.album = new Album(Math.floor(Math.random() * 1000000), '', '', '', 0, '', []); // Initializing a new album instance.\n    this.tracksRaw = ''; // Raw string to hold tracks data from a text input, possibly.\n    this.wasSubmitted = false; // Flag to check if the form was submitted.\n  }\n  // Lifecycle hook that is called after data-bound properties of a directive are initialized.\n  ngOnInit() {}\n  // Method that gets called when the form is submitted.\n  onSubmit() {\n    const tracks = this.parseTracks(this.tracksRaw); // Parsing raw track data to an array of Track objects.\n    this.album.Tracks = tracks; // Assigning the parsed tracks to the album.\n    const status = this.service.createAlbum(this.album); // Calling the service method to create a new album and storing its status.\n    console.log('The return from createAlbum() was ' + status); // Logging the status of the album creation.\n    this.wasSubmitted = true; // Setting the flag to true as the form is submitted.\n  }\n  // Method to parse raw track data (string) into an array of Track objects.\n  parseTracks(rawTracks) {\n    const tracks = []; // Array to hold the parsed Track objects.\n    const lines = rawTracks.split('\\n'); // Splitting the raw data by new lines to process each track.\n    // Iterating over each line and creating a Track object from it.\n    lines.forEach((line, index) => {\n      const [title, lyrics, video] = line.split(':'); // Assuming the format of each track is \"title:lyrics:video\".\n      tracks.push(new Track(Math.floor(Math.random() * 1000000), index + 1, title, lyrics || '', video || '')); // Creating a new Track object and adding it to the array.\n    });\n\n    return tracks; // Returning the array of Track objects.\n  }\n}\n\nCreateAlbumComponent.ɵfac = function CreateAlbumComponent_Factory(t) {\n  return new (t || CreateAlbumComponent)(i0.ɵɵdirectiveInject(i1.MusicServiceService));\n};\nCreateAlbumComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateAlbumComponent,\n  selectors: [[\"app-create-album\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"form-container\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"form-container\"], [3, \"ngSubmit\"], [\"createForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"artist\"], [\"id\", \"artist\", \"type\", \"text\", \"aria-describedby\", \"helpArtist\", \"placeholder\", \"Enter the name of the Artist\", \"required\", \"\", \"name\", \"artist\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"album\"], [\"id\", \"album\", \"type\", \"text\", \"aria-describedby\", \"helpAlbum\", \"placeholder\", \"Enter the name of the Album\", \"required\", \"\", \"name\", \"title\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"description\"], [\"id\", \"description\", \"rows\", \"3\", \"aria-describedby\", \"helpDescription\", \"placeholder\", \"Enter the description of the Album\", \"required\", \"\", \"name\", \"description\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"year\"], [\"id\", \"year\", \"type\", \"text\", \"aria-describedby\", \"helpYear\", \"placeholder\", \"Enter the year of the Album\", \"required\", \"\", \"name\", \"year\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"image\"], [\"id\", \"image\", \"type\", \"text\", \"aria-describedby\", \"helpImage\", \"placeholder\", \"Enter the image filename for the Album\", \"name\", \"image\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"tracks\"], [\"id\", \"tracks\", \"rows\", \"3\", \"aria-describedby\", \"helpTracks\", \"placeholder\", \"Enter each track followed by a return key for the Album\", \"required\", \"\", \"name\", \"tracks\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", \"btn-primary\", \"\", 1, \"btn\"]],\n  template: function CreateAlbumComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CreateAlbumComponent_div_0_Template, 29, 6, \"div\", 0);\n      i0.ɵɵtemplate(1, CreateAlbumComponent_div_1_Template, 2, 0, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.wasSubmitted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.wasSubmitted);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Album","Track","i0","ɵɵelementStart","ɵɵlistener","CreateAlbumComponent_div_0_Template_form_ngSubmit_1_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","onSubmit","ɵɵtext","ɵɵelementEnd","CreateAlbumComponent_div_0_Template_input_ngModelChange_6_listener","$event","ctx_r5","album","Artist","CreateAlbumComponent_div_0_Template_input_ngModelChange_10_listener","ctx_r6","Title","CreateAlbumComponent_div_0_Template_textarea_ngModelChange_14_listener","ctx_r7","Description","CreateAlbumComponent_div_0_Template_input_ngModelChange_18_listener","ctx_r8","Year","CreateAlbumComponent_div_0_Template_input_ngModelChange_22_listener","ctx_r9","Image","CreateAlbumComponent_div_0_Template_textarea_ngModelChange_26_listener","ctx_r10","tracksRaw","ɵɵadvance","ɵɵproperty","ctx_r0","CreateAlbumComponent","constructor","service","Math","floor","random","wasSubmitted","ngOnInit","tracks","parseTracks","Tracks","status","createAlbum","console","log","rawTracks","lines","split","forEach","line","index","title","lyrics","video","push","ɵɵdirectiveInject","i1","MusicServiceService","selectors","decls","vars","consts","template","CreateAlbumComponent_Template","rf","ctx","ɵɵtemplate","CreateAlbumComponent_div_0_Template","CreateAlbumComponent_div_1_Template"],"sources":["D:\\School\\CST-391 JavaScript Web Application Development\\Week 3\\musicapp\\src\\app\\create-album\\create-album.component.ts","D:\\School\\CST-391 JavaScript Web Application Development\\Week 3\\musicapp\\src\\app\\create-album\\create-album.component.html"],"sourcesContent":["// Standard Angular imports for creating components and handling dependency injection.\nimport { Component, OnInit } from '@angular/core';\n// Importing custom classes for Album and Track.\nimport { Album } from '../models/Album';\nimport { Track } from '../models/Track';\n// Importing the music service used for creating an album.\nimport { MusicServiceService } from '../service/music-service.service';\n\n// Decorator that marks a class as an Angular component and provides configuration metadata.\n@Component({\n  selector: 'app-create-album', // The component's CSS element selector in HTML.\n  templateUrl: './create-album.component.html', // The location of the component's template file.\n  styleUrls: ['./create-album.component.css'], // The location of the component's private CSS styles.\n})\nexport class CreateAlbumComponent implements OnInit { // The component class, implementing OnInit for lifecycle hook initialization.\n  album: Album = new Album(Math.floor(Math.random() * 1000000), '', '', '', 0, '', []); // Initializing a new album instance.\n  tracksRaw: string = ''; // Raw string to hold tracks data from a text input, possibly.\n  wasSubmitted: boolean = false; // Flag to check if the form was submitted.\n\n  // Injecting the music service into the component.\n  constructor(private service: MusicServiceService) { }\n\n  // Lifecycle hook that is called after data-bound properties of a directive are initialized.\n  ngOnInit() { }\n\n  // Method that gets called when the form is submitted.\n  public onSubmit() {\n    const tracks: Track[] = this.parseTracks(this.tracksRaw); // Parsing raw track data to an array of Track objects.\n    this.album.Tracks = tracks; // Assigning the parsed tracks to the album.\n    const status = this.service.createAlbum(this.album); // Calling the service method to create a new album and storing its status.\n    console.log('The return from createAlbum() was ' + status); // Logging the status of the album creation.\n    this.wasSubmitted = true; // Setting the flag to true as the form is submitted.\n  }\n\n  // Method to parse raw track data (string) into an array of Track objects.\n  private parseTracks(rawTracks: string): Track[] {\n    const tracks: Track[] = []; // Array to hold the parsed Track objects.\n    const lines = rawTracks.split('\\n'); // Splitting the raw data by new lines to process each track.\n\n    // Iterating over each line and creating a Track object from it.\n    lines.forEach((line, index) => {\n      const [title, lyrics, video] = line.split(':'); // Assuming the format of each track is \"title:lyrics:video\".\n      tracks.push(new Track(Math.floor(Math.random() * 1000000), index + 1, title, lyrics || '', video || '')); // Creating a new Track object and adding it to the array.\n    });\n\n    return tracks; // Returning the array of Track objects.\n  }\n}","<div class=\"form-container\" *ngIf=\"!wasSubmitted\">\n    <form (ngSubmit)=\"onSubmit()\" #createForm=\"ngForm\">\n        <div class=\"form-group\">\n            <label for=\"artist\">Artist</label> <input id=\"artist\" type=\"text\" class=\"form-control\"\n                aria-describedby=\"helpArtist\" placeholder=\"Enter the name of the Artist\" required\n                [(ngModel)]=\"album.Artist\" name=\"artist\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"album\">Album</label> <input id=\"album\" type=\"text\" class=\"form-control\"\n                aria-describedby=\"helpAlbum\" placeholder=\"Enter the name of the Album\" required\n                [(ngModel)]=\"album.Title\" name=\"title\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea id=\"description\" rows=\"3\" class=\"form-control\" aria-describedby=\"helpDescription\"\n                placeholder=\"Enter the description of the Album\" required [(ngModel)]=\"album.Description\"\n                name=\"description\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"year\">Year</label> <input id=\"year\" type=\"text\" class=\"form-control\" aria-describedby=\"helpYear\"\n                placeholder=\"Enter the year of the Album\" required [(ngModel)]=\"album.Year\" name=\"year\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"image\">Image Filename</label> <input id=\"image\" type=\"text\" class=\"form-control\"\n                aria-describedby=\"helpImage\" placeholder=\"Enter the image filename for the Album\"\n                [(ngModel)]=\"album.Image\" name=\"image\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"tracks\">Tracks</label>\n            <textarea id=\"tracks\" rows=\"3\" class=\"form-control\" aria-describedby=\"helpTracks\"\n                placeholder=\"Enter each track followed by a return key for the Album\" required [(ngModel)]=\"tracksRaw\"\n                name=\"tracks\"></textarea>\n        </div>\n        <button type=\"submit\" class=btn btn-primary>Submit</button>\n    </form>\n</div>\n<div *ngIf=\"wasSubmitted\">Album was added successfully.</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}